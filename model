import torch.nn as nn
import math
from torch.nn import functional as F
import torch
from torch.nn import init


class Bottleneck_sod(nn.Module):
    expansion = 4

    def __init__(self, inplanes, planes, stride=1, dilation=1, downsample=None):

        super(Bottleneck_sod, self).__init__()
        self.conv1 = nn.Conv2d(inplanes, planes, kernel_size=1, bias=False)
        self.bn1 = nn.BatchNorm2d(planes, eps=1e-5, momentum=0.1, affine=True)

        self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=stride,
                               padding=dilation, bias=False, dilation=dilation)
        self.bn2 = nn.BatchNorm2d(planes, eps=1e-5, momentum=0.1, affine=True)

        self.conv3 = nn.Conv2d(planes, planes * 4, kernel_size=1, bias=False)
        self.bn3 = nn.BatchNorm2d(planes * 4, eps=1e-5, momentum=0.1, affine=True)
        self.relu = nn.ReLU(inplace=True)
        self.downsample = downsample
        self.stride = stride

    def forward(self, x):
        residual = x

        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)

        out = self.conv2(out)
        out = self.bn2(out)
        out = self.relu(out)

        out = self.conv3(out)
        out = self.bn3(out)

        if self.downsample is not None:
            residual = self.downsample(x)

        out += residual
        out = self.relu(out)

        return out


class ResNet_sod(nn.Module):

    def __init__(self, bot_block, layers):
        self.inplanes = 64
        super(ResNet_sod, self).__init__()

        self.conv1 = nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False)
        self.bn1 = nn.BatchNorm2d(64)
        self.relu = nn.ReLU(inplace=True)
        self.maxpool = nn.MaxPool2d(kernel_size=2, stride=2, ceil_mode=True)

        self.layer1 = self._make_layer(bot_block, 64, layers[0], stride=1)
        self.layer2 = self._make_layer(bot_block, 128, layers[1], stride=2)
        self.layer3 = self._make_layer(bot_block, 256, layers[2], stride=1, dilation__=2)
        self.layer4 = self._make_layer(bot_block, 512, layers[3], stride=1, dilation__=4)

        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                m.weight.data.normal_(0, 0.01)
            elif isinstance(m, nn.BatchNorm2d):
                m.weight.data.fill_(1)
                m.bias.data.zero_()


    def _make_layer(self, block, planes, blocks, stride=1, dilation__=1):
        downsample = None
        if stride != 1 or self.inplanes != planes * block.expansion or dilation__ == 2 or dilation__ == 4:
            downsample = nn.Sequential(
                nn.Conv2d(self.inplanes, planes * block.expansion,
                          kernel_size=1, stride=stride, bias=False),
                nn.BatchNorm2d(planes * block.expansion, affine=True),
            )
        for i in downsample._modules['1'].parameters():
            i.requires_grad = False
        layers = []
        layers.append(block(self.inplanes, planes, stride, downsample=downsample))
        self.inplanes = planes * block.expansion
        for i in range(1, blocks):
            layers.append(block(self.inplanes, planes))

        return nn.Sequential(*layers)

    def add_feature(self, c0, c1, c2, c3, c4):
        feat = []
        feat.append(c4)
        feat.append(c3)
        feat.append(c2)
        feat.append(c1)
        feat.append(c0)

        return feat

    def forward(self, input):

        c = self.conv1(input)

        c = self.bn1(c)
        c = self.relu(c)    #128

        c0 = self.maxpool(c)
        c1 = self.layer1(c0)  # 64
        c2 = self.layer2(c1)  # 32
        c3 = self.layer3(c2)  # 16
        c4 = self.layer4(c3)  # 16

        feat = self.add_feature(c, c1, c2, c3, c4)

        return feat

def resnet101_map(**kwargs):

    model = ResNet_sod(Bottleneck_sod,[3, 4, 23, 3], **kwargs)

    return model

class Deconv(nn.Module):
    def __init__(self):
        super(Deconv, self).__init__()
        _reduce_dimension = [
            nn.Conv2d(2048, 32, 1),
            nn.Conv2d(1024, 32, 1),
            nn.Conv2d(512, 32, 1),
        ]
        _prediction = [
            nn.Conv2d(32, 1, 1),
            nn.Conv2d(33, 1, 1),
            nn.Conv2d(33, 1, 1),
        ]
        self.reduce_dimension = nn.ModuleList(_reduce_dimension)
        self.prediction = nn.ModuleList(_prediction)
        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                init.xavier_normal(m.weight.data)
                m.bias.data.fill_(0)

    def forward(self, feats):
        for i in range(len(feats)):
            feats[i] = self.reduce_dimension[i](feats[i])
        y = self.prediction[0](feats[0])
        for i in range(1, len(feats)):
            y = self.prediction[i](
                torch.cat((F.interpolate(feats[i], size=y.shape[2], mode='bilinear'), y), 1)
            )
        return y

class Net_conv(nn.Module):
    def __init__(self):
        super(Net_conv, self).__init__()
        self.ip_1 = nn.ModuleList(
            [
                #128
                nn.Sequential(
                    nn.Conv2d(64, 64, kernel_size=1, groups=32),
                    nn.BatchNorm2d(64),
                ),
                #64
                nn.Sequential(
                    nn.Conv2d(256, 64*4, kernel_size=1, groups=32),
                    nn.BatchNorm2d(64*4),
                    nn.PixelShuffle(2)
                ),
                #32
                nn.Sequential(
                    nn.Conv2d(512, 64 * 16, kernel_size=1, groups=32),
                    nn.BatchNorm2d(64 * 16),
                    nn.PixelShuffle(4)
                ),
                #32
                nn.Sequential(
                    nn.Conv2d(1024, 64 * 16, kernel_size=1, groups=32),
                    nn.BatchNorm2d(64 * 16),
                    nn.PixelShuffle(4)
                ),
                #32
                nn.Sequential(
                    nn.Conv2d(2048, 64 * 16, kernel_size=1, groups=32),
                    nn.BatchNorm2d(64 * 16),
                    nn.PixelShuffle(4)
                )
            ]
        )

        self.w = nn.Conv2d(64*5, 256, 1)
        self.u = nn.Conv2d(512, 256, 1)
        #self.v = nn.Conv2d(64*5, 512, kernel_size=3, padding=1)

        for m in self.modules():
            if isinstance(m, nn.Conv2d) or isinstance(m, nn.ConvTranspose2d):
                init.xavier_normal(m.weight.data)
                m.bias.data.fill_(0)

        for i in range(1, 5):
            init.xavier_normal(self.ip_1[i][0].weight.data[0])
            self.ip_1[i][0].weight.data[1:].copy_(self.ip_1[i][0].weight.data[0:1])
            m.bias.data.fill_(0)


    def forward(self, feats, map, piror):
        fs1 = []

        for i in range(5):
            fs1.append(self.ip_1[i](feats[i]))
        feats = torch.cat(fs1, 1)
        map = map.expand_as(feats)

        feat_z, feat_f = self.w(feats), self.w(feats)
        map_z, map_f = self.w(map), self.w(map)

        f1 = map_z + feat_z
        f2 = map_f + feat_f

        for i in range(1, 4):

            m = 1.0 / i
            n = 1 - m
            feat_z = self.u(piror * torch.cat((feat_z, f1), 1))
            map_z = self.u(piror * torch.cat((map_z, f1), 1))
            feat_f = self.u((1 - piror) * torch.cat((feat_f, f2), 1))
            map_f = self.u((1 - piror) * torch.cat((map_f, f2), 1))

            f1 = feat_z * m + map_z * n
            f2 = feat_f * m + map_f * n

        f1 = f1.sum(dim=2, keepdim=True).sum(dim=3, keepdim=True) / piror.sum()
        f2 = f2.sum(dim=2, keepdim=True).sum(dim=3, keepdim=True) / (1-piror).sum()

        feats = self.w(feats)
        map = self.w(map)

        dist1 = (feats + map - f1)**2
        dist1 = torch.sqrt(dist1.sum(dim=1, keepdim=True))
        dist2 = (feats + map - f2)**2
        dist2 = torch.sqrt(dist2.sum(dim=1, keepdim=True))
        #print(dist2-dist1)

        return dist2 - dist1




