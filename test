from torch.autograd import Variable
import torch
import numpy as np
import torch.nn.functional as F
import os
from torch.utils import data as data_
#from gan_map_DHSnet import resnet101_map, Deconv, Net_conv
from model_1 import resnet101_map, Deconv, Net_conv
from PIL import Image
from dataset_image import MyTestData
from crf import run_crf
from dataset_image import MyTestData, MyData
from matplotlib.pyplot import imsave


def main():
    output_dir1 = './test_val/'
    data_dir1 = './DUTS/DUTS-TE/'
    #DUTS/DUTS-TE/
    # images
    #best_parameters
    #parameters_wss

    Testloader = data_.DataLoader(MyTestData(data_dir1, piror='DUTS-TE-Image/'), batch_size=1, num_workers=4, shuffle=False)

    feature = resnet101_map()
    feature.load_state_dict(torch.load('./parameters_wss/feat.pth'))
    feature.cuda()

    net = Net_conv()
    net.load_state_dict(torch.load('./parameters_wss/net.pth'))
    net.cuda()

    deconv = Deconv()
    deconv.load_state_dict(torch.load('./parameters_wss/deconv.pth'))
    deconv.cuda()

    test(Testloader, feature, net, deconv, output_dir1)

def test(loader, feature, net, deconv, output_dir1):

    with torch.no_grad():
        feature.eval()
        it = 0
        for ib, (data, map, name, size) in enumerate(loader):
            it += 1
            inputs = Variable(data).cuda()
            map = map.unsqueeze(1).cuda()

            feats = feature(inputs)
            msk = deconv(feats[:3])
            feats = feats[::-1]

            msk = F.interpolate(msk, size=128, mode='bilinear')
            map = F.interpolate(map, size=128, mode='bilinear')

            msk = net(feats, msk, map.detach())

            '''for t in range(1, 4 + 1):
                msk = F.sigmoid(net(feats, msk, map.detach())) * (1.0 / t) + map.detach() * ((t - 1.0) / t)'''
            msk = F.sigmoid(msk)
            #print(torch.max(msk))
            msk = F.interpolate(msk, size=(size[1], size[0]), mode='bilinear')
            mask = msk.data[0, 0].cpu().numpy()

            #print(mask)
            mask = (mask * 255)
            mask = mask.astype(np.uint8)
            mask = Image.fromarray(mask)
            mask.save(os.path.join(output_dir1, name[0] + '.png'), 'png')
            print(it)

        print('all save!')

if __name__ == '__main__':
    main()
